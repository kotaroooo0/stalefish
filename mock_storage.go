// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go

// Package stalefish is a generated GoMock package.
package stalefish

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddDocument mocks base method.
func (m *MockStorage) AddDocument(arg0 Document) (DocumentID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDocument", arg0)
	ret0, _ := ret[0].(DocumentID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDocument indicates an expected call of AddDocument.
func (mr *MockStorageMockRecorder) AddDocument(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDocument", reflect.TypeOf((*MockStorage)(nil).AddDocument), arg0)
}

// AddToken mocks base method.
func (m *MockStorage) AddToken(arg0 Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToken", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddToken indicates an expected call of AddToken.
func (mr *MockStorageMockRecorder) AddToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToken", reflect.TypeOf((*MockStorage)(nil).AddToken), arg0)
}

// CountDocuments mocks base method.
func (m *MockStorage) CountDocuments() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountDocuments")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountDocuments indicates an expected call of CountDocuments.
func (mr *MockStorageMockRecorder) CountDocuments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountDocuments", reflect.TypeOf((*MockStorage)(nil).CountDocuments))
}

// GetAllDocuments mocks base method.
func (m *MockStorage) GetAllDocuments() ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllDocuments")
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllDocuments indicates an expected call of GetAllDocuments.
func (mr *MockStorageMockRecorder) GetAllDocuments() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllDocuments", reflect.TypeOf((*MockStorage)(nil).GetAllDocuments))
}

// GetDocuments mocks base method.
func (m *MockStorage) GetDocuments(arg0 []DocumentID) ([]Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDocuments", arg0)
	ret0, _ := ret[0].([]Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDocuments indicates an expected call of GetDocuments.
func (mr *MockStorageMockRecorder) GetDocuments(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDocuments", reflect.TypeOf((*MockStorage)(nil).GetDocuments), arg0)
}

// GetInvertedIndexByTokenIDs mocks base method.
func (m *MockStorage) GetInvertedIndexByTokenIDs(arg0 []TokenID) (InvertedIndex, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvertedIndexByTokenIDs", arg0)
	ret0, _ := ret[0].(InvertedIndex)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvertedIndexByTokenIDs indicates an expected call of GetInvertedIndexByTokenIDs.
func (mr *MockStorageMockRecorder) GetInvertedIndexByTokenIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvertedIndexByTokenIDs", reflect.TypeOf((*MockStorage)(nil).GetInvertedIndexByTokenIDs), arg0)
}

// GetTokenByTerm mocks base method.
func (m *MockStorage) GetTokenByTerm(arg0 string) (Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenByTerm", arg0)
	ret0, _ := ret[0].(Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenByTerm indicates an expected call of GetTokenByTerm.
func (mr *MockStorageMockRecorder) GetTokenByTerm(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenByTerm", reflect.TypeOf((*MockStorage)(nil).GetTokenByTerm), arg0)
}

// GetTokensByTerms mocks base method.
func (m *MockStorage) GetTokensByTerms(arg0 []string) ([]Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokensByTerms", arg0)
	ret0, _ := ret[0].([]Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokensByTerms indicates an expected call of GetTokensByTerms.
func (mr *MockStorageMockRecorder) GetTokensByTerms(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokensByTerms", reflect.TypeOf((*MockStorage)(nil).GetTokensByTerms), arg0)
}

// UpsertInvertedIndex mocks base method.
func (m *MockStorage) UpsertInvertedIndex(arg0 InvertedIndex) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertInvertedIndex", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertInvertedIndex indicates an expected call of UpsertInvertedIndex.
func (mr *MockStorageMockRecorder) UpsertInvertedIndex(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertInvertedIndex", reflect.TypeOf((*MockStorage)(nil).UpsertInvertedIndex), arg0)
}
